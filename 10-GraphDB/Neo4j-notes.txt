
CREATE(`Elon Musk`:CEO) 

CREATE (Elon:CEO{name: "Elon Musk", YOB: 1967, POB: "SA"})

MATCH(n) return n

CREATE (Tesla:Company {name: "Tesla", founded: 2003})

CREATE(Elon)-[r:CEO]->(Tesla)


// Create relationship between nodes - Person and Movie

CREATE(p:Person {name: "Tom Hanks", YOB: 1956})
CREATE(m:Movie {title: "Forrest Gump", released: 1994})

MATCH(p:Person {name: "Tom Hanks"}), (m:Movie {title: "Forrest Gump"})
CREATE(p)-[:ACTED_IN]->(m)

// View relationships and nodes 
MATCH p=()-[:ACTED_IN]-() RETURN p LIMIT 25

// View only Person 
MATCH (p:Person { name: "Tom Hanks"}) RETURN p

// View both Person and Movie without relationship
MATCH (p:Person)-[:ACTED_IN]-(m:Movie) RETURN p,m LIMIT 25

// Update query 
MATCH (p:Person {name: "Tom Hanks"}) SET p.YOB = 1957

https://raw.githubusercontent.com/krishnaik06/graph-dataset/main/users_social.csv
https://raw.githubusercontent.com/krishnaik06/graph-dataset/main/posts.csv
https://raw.githubusercontent.com/krishnaik06/graph-dataset/main/relationships.csv

// Import User social CSV file into Neo4j
LOAD CSV WITH HEADERS FROM "https://raw.githubusercontent.com/krishnaik06/graph-dataset/main/users_social.csv" AS row
CREATE (:User { 
    userId: toInteger(row.userId), 
    name: row.name,   
    age: toInteger(row.age),
    city: row.city
});

// Import Posts CSV file into Neo4j
LOAD CSV WITH HEADERS From "https://raw.githubusercontent.com/krishnaik06/graph-dataset/main/posts.csv" as row 
MATCH (u:User {userId:toInteger(row.userId)})
CREATE (u)-[:POSTED]->(:Post {
    postId:toInteger(row.postId),
    content:row.content,
    timestamp:datetime(row.timestamp)
})

// Import Relationship CSV file into Neo4j
LOAD CSV WITH HEADERS FROM "https://raw.githubusercontent.com/krishnaik06/graph-dataset/main/relationships.csv" AS row 
MATCH (u1:User {userId: toInteger(row.userId1)}), (u2: User {userId: toInteger(row.userId2)})
CREATE (u1)-[:FRIEND]->(u2) 
CREATE (u1)-[:LIKES]->(u2);

// Find posts of all users in John's friend list
MATCH (u: User { name: "John"} )-[:FRIEND]-(f: User)-[:POSTED]->(p: Post) 
RETURN f.name, p.content, p.timestamp 

// Count the no. of friends each user has 
MATCH (u: User)-[:FRIEND]-(f: User)
RETURN u.name, COUNT(f) AS numFriends 
ORDER BY numFriends DESC

// List all friends of Mike 
MATCH (u: User { name: "Mike"})-[:FRIEND]-(f:User)
RETURN f.name, f.age 
ORDER BY f.age DESC 


